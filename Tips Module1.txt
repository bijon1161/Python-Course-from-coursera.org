# -*- coding: utf-8 -*-
"""
Created on Tue May 11 18:48:08 2021

@author: Admin
"""

"""
     IMPORTANT TIPS ABOUT THE TEST PROBLEMS AND THE AUTO-GRADER

1) When you upload your problem(s) you click on SUBMIT at the bottom of the 
page.  That will start the auto-grader.  It should return with your grade
within a few minutes. 
 
2) You can resubmit any problem as often as you would like and find out how
you did in minutes. This is the advantage of the autograder over peer grading 
used in many courses. With peer grading you'd have to grade several other 
students' problems at the end of the week, you wouldn't find out how you did 
for at least a week, and you couldn't resubmit.  

3) The downside of the auto-grader is that it is very strict and literal. You
should format your output EXACTLY as shown in the example runs.

4) Common mistakes: including an extra space in the printout, mis-spelling a
word, changing the punctuation that the example uses, and using end=" " when 
not needed. 

5) The example run uses example data.  The auto-grader will always use 
different data, so don't write functions that are specific to the example data.

6) These are test questions that can be resubmitted.  So the auto-grader gives
fairly generic error messages -- it does not tell you how to fix your function.
It will say that your code produced too few lines or too many lines; it will 
say whether your code failed x number of test cases and give you a fractional
score out of 10 rounded to the nearest integer. For example, if the function 
should output 3 lines and you got 2 of the 3 right, it would say failed one 
case and give you a score of 7 (2/3 of 10 rounded)).  Sometimes, we run your
function several times on different data.  In this case it will tell you the 
number of cases (i.e., runs) that failed and give you a fractional score. It 
may tell you that your function failed to run. Often if your program crashes, 
there will be lots of error messages produced and the grader will tell you it 
produced too many lines.  

7) Run your program on the example data and make sure it matches the example 
output.  If you program doesn't get full credit when graded, check the format
of the print statements first.  

8) All of the exercises in this course can be solved using the material in the
course lectures.  There is no need to look to outside sources of more material.
In fact, a sophisticated outside technique can sometimes have side-effects that
you aren't aware of that causes your function to fail the grader.
"""